model ApiHealthCheck {
  id            String      @id @default(cuid())
  url           String
  status        APIStatus
  lastCheckedAt DateTime    @default(now()) @map("last_checked_at")
  interval      Int         @default(900) // Interval in seconds
  method        HttpMethods @default(GET)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId             String
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailNotification  EmailNotification?
  apiHealthCheckLogs ApiHealthCheckLog[]

  @@map("api_health_checks")
}

model ApiHealthCheckLog {
  id           Int       @id @default(autoincrement())
  status       APIStatus
  responseTime Int       @default(0) // Response time in milliseconds
  checkedAt    DateTime  @default(now()) @map("checked_at")

  apiHealthCheckId String         @map("api_health_check_id") @db.VarChar(255)
  apiHealthCheck   ApiHealthCheck @relation(fields: [apiHealthCheckId], references: [id], onDelete: Cascade)

  @@map("api_health_check_logs")
}

model EmailNotification {
  id     Int      @id @default(autoincrement())
  emails String[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  apiHealthCheckId String         @unique @map("api_health_check_id") @db.VarChar(255)
  apiHealthCheck   ApiHealthCheck @relation(fields: [apiHealthCheckId], references: [id], onDelete: Cascade)

  @@map("email_notifications")
}

enum APIStatus {
  UP
  DOWN
  PENDING
}

enum HttpMethods {
  GET
  POST
  PUT
  DELETE
  PATCH
  HEAD
}
